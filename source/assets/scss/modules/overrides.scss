@import '../settings';
// @import '../../../../node_modules/foundation-sites/scss/util/_mixins.scss';
@import '../mixins/colors';
@import '../mixins/functions';

// ---------
// 37. Datica Custom Helpers
// ---------

// These must be imported at the end of the pipeline, because they're used to override other classes' attributes.

// .float-right/left is built-in, these are redundant. Can't find em though, too generic
.right {float: right;}
.left  {float: left;}

// .float-left|right are useful for content inside entries at CF.
.float {
    // using em here, because it's often applied to images inline in copy. Em will respect the font size of containing text.
    &-left {
        margin-right: 1em !important;
        &-on-medium {
            float: none;
            margin-left: auto;
            margin-right: auto;
            display: block;
            @include breakpoint (medium) {
                display: inline;
                float: left;
                margin-right: 1em;
            }
        }
        &-on-large {
            float: none;
            margin-left: auto;
            margin-right: auto;
            display: block;
            @include breakpoint (large) {
                display: inline;
                float: left;
                margin-right: 1em;
            }
        }

    }
    &-right {
        margin-left: 1em !important;
        &-on-medium {
            float: none;
            margin-left: auto;
            margin-right: auto;
            display: block;
            @include breakpoint (medium) {
                display: inline;
                float: right;
                margin-left: 1em;
            }
        }
        &-on-large {
            float: none;
            margin-left: auto;
            margin-right: auto;
            display: block;
            @include breakpoint (large) {
                display: inline;
                float: right;
                margin-left: 1em;
            }
        }
    }
}
// .pad-1 {
//     padding: 1rem;
// }
// .m { // I know.. tachyons-style atomic classes. for some custom situations, just need a 'lil margin
//     &-top    {margin-top:    $card-padding;}
//     &-right  {margin-right:  $card-padding;}
//     &-bottom {margin-bottom: $card-padding;}
//     &-left   {margin-left:   $card-padding;}
// }
// .p {
//     &-top    {padding-top:    $card-padding;}
//     &-right  {padding-right:  $card-padding;}
//     &-bottom {padding-bottom: $card-padding;}
//     &-left   {padding-left:   $card-padding;}
// }
// .m-no { // I know.. tachyons-style atomic classes. for some custom situations, just need a 'lil margin
//     &-top    {margin-top:     0};
//     &-right  {margin-right:   0};
//     &-bottom {margin-bottom:  0};
//     &-left   {margin-left:    0};
// }

.pad {
    $gap: 1.5vw;
    padding: $gap;
    &--sm {
        padding: $gap * 0.5;
        padding: calc(0.5rem + 1vw);
    }
    &--lg { // spacing!
        padding: $gap;
        padding: calc(1rem + 1.2vw);
    }
    &--xl { // moar spacing!
        padding: $gap * 2;
        padding: calc(1rem + 3vw);
    }
}

.pad-no {
//     &-top    {padding-top:    0;}
//     &-right  {padding-right:  0;}
    &-bottom {padding-bottom: 0;}
//     &-left   {padding-left:   0;}
}
.block { // useful when you need to cap the width of a person widget, etc.
    &-width-medium {
        max-width: 14rem;
    }
}

.text { // generic text style classes
    &--spaced {
        @extend .spaced-out;
    }
    &--inverted {
        color: white;
    }
    @each $color-name, $color in $fill-color-list {
        &--#{$color-name}{
            color: $color;
            opacity: 1; // default subheaders have half
        }
    }
    &-uppercase {
        text-transform: uppercase;
    }
    &-underline{
        display: inline-block;
        padding: 0 0 rem-calc(2px) 0;
        border-bottom: rem-calc(2px) solid $color_deep;
    }
    &-smaller, &-small, &-tiny, &-micro {
        font-size: smaller; // goes one step smaller than parent element
    }
    &-smallest {
        font-size: 75%;
    }
    &-tiny {
        font: {
            size: rem-calc(12px);
            weight: $font-weight-regular;
        }
    }
    &-larger {
        font-size: 120%;
    }
    &-regular, &-normal, &-reg {
        font-weight: $font-weight-regular !important;
    }
    &-light {
        font-weight: $font-weight-light !important;
    }
    &-strong, &-bold {
        font-weight: $font-weight-bold !important;
    }
    // &-italic {
    //     font-style: italic;
    // }
    &-sans {
        font-family: $font_sans;
    }
    &-serif {
        font-family: $font_serif;
    }
    &-italic {
        font-style: italic;
    }
}

// normally containers set child colors, when possible; when not, use these link color overrides.
.link {
    &--white, &-light, &-light-plain, &-light-underline, &--yellow {
        &:visited, &:active {
            color: inherit;
        }
    }
    &--white, &-light {
        font-weight: $font-weight-bold;
        color: $white !important;
        border-bottom: 1px solid transparent;
        &:hover {
            color: lighten($color_yellow-glow, 5%) !important;
            border-bottom: 1px solid lighten($color_yellow-glow, 5%);
        }
    }
    &-light-plain {
        color: white !important;
        border: none;
        &:hover {
            border: none;
        }
    }
    &-light-underline {
        color: inherit; // if another style is combined, text color follows. Line color still independent
        text-decoration: none;
        transition: border-bottom .15s linear,color .15s linear;
        border-bottom: 3px solid white(0.2);
        padding-bottom: 0.1em;
        &:hover {
            color: inherit;
            border-color: white(1);
        }
    }
    &--yellow {
        font-weight: $font-weight-bold;
        color: $color_yellow-glow !important;
        border-bottom: 1px solid transparent;
        &:hover {
            color: $white !important;
            border-bottom: 1px solid $white;
        }
    }

    &--blue-bright {
        font-weight: $font-weight-bold;
        color: $color_aqua-glow !important;
        // border-bottom: 1px solid transparent;
        &:hover {
            color: $white !important;
            // border-bottom: 1px solid $color_yellow-glow;
        }
    }
    &--mini-cta{
        color: $color_yellow-glow !important;
        font-weight: $font-weight-mid;
        &:hover {
            color: $white !important;
        }
    }
    &--dark {
        color: $black !important;
        &:hover {
            color: $color_prime !important;
        }
    }
}
.link-arrow {
    // @apply .uppercase .font-bold .text-base .no-underline .font-bold .text-green-deep .tracking-relaxed;
    &::after {
        transition: transform $timing-default * 2 ease, opacity $timing-default * 2 ease;
        content: url("/assets/icons/inlined/small/icon-chevron-right-blue.svg");
        // content: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='18' height='15' viewBox='0 0 18 15'><path d='M7.5 4.5L6.44 5.56 9.88 9l-3.44 3.44L7.5 13.5 12 9z' fill='currentColor'/><path d='M0 0h18v18H0z' fill='none'/></svg>");
        // content: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='9' height='28'><path fill='currentColor' d='M9.297 15c0 0.125-0.063 0.266-0.156 0.359l-7.281 7.281c-0.094 0.094-0.234 0.156-0.359 0.156s-0.266-0.063-0.359-0.156l-0.781-0.781c-0.094-0.094-0.156-0.219-0.156-0.359 0-0.125 0.063-0.266 0.156-0.359l6.141-6.141-6.141-6.141c-0.094-0.094-0.156-0.234-0.156-0.359s0.063-0.266 0.156-0.359l0.781-0.781c0.094-0.094 0.234-0.156 0.359-0.156s0.266 0.063 0.359 0.156l7.281 7.281c0.094 0.094 0.156 0.234 0.156 0.359z'></path></svg>");
        opacity: 0.6;
        display: inline-block;
        width:  0.8em;
        height: 0.8em;
        margin-left: 0.2em;
        transform: translate3d(0px, 0.05em, 0);
    }
    &--white {
        color: white;
        &::after {
            content: url("/assets/icons/inlined/small/icon-chevron-right-white.svg");
        }
    }
    &--yellow {
        color: $color_yellow-glow;
        &::after {
            content: url("/assets/icons/inlined/small/icon-chevron-right-yellow.svg");
        }
    }
    &:hover:after {
        transition: transform $timing-default * 0.5 ease, opacity $timing-default * 0.5 ease;
        transform: translate3d(3px, 0.05em, 0);
        opacity: 1;
    }
}
.link--white-parent { // when you need to style a link inside a component/partial
    a {
        font-weight: $font-weight-bold;
        color: $white !important;
        border-bottom: 1px solid transparent;
        &:hover {
            color: lighten($color_yellow-glow, 5%) !important;
            border-bottom: 1px solid lighten($color_yellow-glow, 5%);
        }
    }
}
.card {
    &-section, &-divider {
        blockquote {
            padding-top: 0 !important;
        }
    }
}
.content-dynamic {
    iframe { // these can be targeted with .wrap() for responsive wrappers
        padding: $media-pad 0 !important;
    }
}
.no-radius {
    border-radius: 0;
}
.relative{
    position: relative;
}

// === overrides third-party hubspot forms, widgets, etc. ===
.form-embed { // positioning landing page forms, pulls it up
    @include breakpoint(large) {
        margin-top: -4.5rem;
    }
    @include breakpoint(xlarge) {
        margin-top: -7rem;
    }
}

// Swiftype CSS.
// div.st-ui-autocomplete div.st-query-present a.st-ui-result, section.st-ui-slide-autocomplete div.st-query-present a.st-ui-result {
//     padding-left: rem-calc(15) !important;
// }
// hubspot
.hs-button {
    @include easing($timing-default);
    background-color: $success_color;
    color: white;
    font-weight: bold;
    padding: 11px 18px;
    width: 100%;
    &:hover {
        background-color: adjust-color($success_color, $lightness: 5%, $saturation: 10%);
    }
}
.hs-error-msgs li label {
    font-style: italic;
    color: darken($alert_color, 5%);
    margin-bottom: 1.2rem;
}
.z {
    &-back {
        z-index: -10;
    }
    &-bg {
        z-index: -5;
    }
    &-0 {
        z-index: 0;
    }
    &-5 {
        z-index: 5;
    }
    &-10 {
        z-index: 10;
    }
    &-20 { // navs should exist here
        z-index: 20;
    }
    &-auto {
        z-index: auto;
    }
}
.faded {
    @include opacity(0.6);
    @include breakpoint (large) {
        @include easing(300ms);
        &:hover {
            @include opacity(1);
        }
    }
}
.faded-max {
    @extend .faded;
    transition-duration: $timing-slow;
    @include breakpoint (large) {
        @include opacity(0.2);
    }
}
.opacity-0 {
  // transition: opacity $timing-default linear;
  opacity: 0;
}
.opacity-100 {
    opacity: 100;
}
// .margin-auto {
//     margin-right: auto;
//     margin-left:  auto;
// }
.nomargin, .no-margin {
    margin-bottom: 0;
}
.no-margin-top{
  margin-top: 0;
}
.no-margin-all-the-things{
  margin: 0 !important;
  @media screen and (min-width: 40em){ margin: 0 !important; }
}
.nopad, .no-pad {
    padding: 0;
}
.margin-bottom-small { // for headlines and stuff
    margin-bottom: 0.3em;
}
.hyphens {
    @include hyphens(auto);
    &-no {
        @include hyphens(none);
    }
}

// .overflow-hidden {}
